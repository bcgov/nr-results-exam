name: Analysis

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  schedule:
    - cron: "0 11 * * 0" # 3 AM PST = 12 PM UDT, Sundays
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  codeql:
    name: CodeQL
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy:
    name: Trivy Security Scan
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.29.0
        with:
          format: "sarif"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          scan-type: "fs"
          scanners: "vuln,secret,config"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  lint-frontend:
    name: Lint (Frontend)
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-24.04
    steps:
      - uses: bcgov/action-test-and-analyse@v1.2.1
        with:
          commands: |
            npm ci
            npm run lint || true
          dir: frontend
          node_version: "20"
          # Only use triggers for PRs
          triggers: ${{ github.event_name == 'pull_request' && '("frontend/")' || '' }}

  tests-frontend:
    name: Tests (Frontend)
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-24.04
    steps:
      - uses: bcgov/action-test-and-analyse@v1.2.1
        env:
          VITE_ZONE: test
          VITE_USER_POOLS_ID: ca-central-1_abc123
          VITE_USER_POOLS_WEB_CLIENT_ID: abc123
          VITE_BACKEND_URL: http://localhost:8080
        with:
          commands: |
            npm ci
            npm run test:coverage
          dir: frontend
          node_version: "20"
          sonar_args: >
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.projectKey=nr-results-exam-frontend
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.typescript.tsconfigPaths=tsconfig.json
            -Dsonar.sources=src/
            -Dsonar.exclusions=src/__test__/**,src/amplifyconfiguration.*,src/**/*.scss,src/**/*.css,src/**/*.d.*,src/setupTests.*
            -Dsonar.tests=src/__test__/
            -Dsonar.project.monorepo.enabled=true
          sonar_token: ${{ secrets.SONAR_TOKEN_FRONTEND }}
          # Only use triggers for PRs
          triggers: ${{ github.event_name == 'pull_request' && '("frontend/")' || '' }}

  tests:
    name: Tests
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        dir: [backend]
        include:
          - dir: backend
            sonar_projectKey: nr-results-exam-backend
            token: SONAR_BACKEND
            sonar_args: >
              -Dsonar.sources=.
            triggers: ('backend/')
    steps:
      - uses: bcgov/action-test-and-analyse@v1.2.1
        with:
          commands: |
            npm ci
            npm run test:coverage
          dir: ${{ matrix.dir }}
          node_version: "20"
          sonar_args: >
            -Dsonar.exclusions=**/node_modules/**,**/*spec.ts
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.projectKey=${{ matrix.sonar_projectKey }}
            ${{ matrix.sonar_args }}
          #  -Dsonar.tests.inclusions=**/*spec.ts
          #  -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
          sonar_token: ${{ secrets[matrix.token] }}
          triggers: ${{ matrix.triggers }}

  results:
    name: Analysis Results
    if: always()
    # Include all needs that could have failures!
    needs: [codeql, trivy, lint-frontend, tests-frontend]
    runs-on: ubuntu-24.04
    steps:
      - run: |
          # View results
          echo "needs.*.result: ${{ toJson(needs.*.result) }}"

      - if: contains(needs.*.result, 'failure')||contains(needs.*.result, 'canceled')
        run: |
          # Job failure found
          echo "At least one job has failed"
          exit 1
